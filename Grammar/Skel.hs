-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transExpr :: Show a => Grammar.Abs.Expr' a -> Result
transExpr x = case x of
  Grammar.Abs.EVar _ ident -> failure x
  Grammar.Abs.EInt _ integer -> failure x
  Grammar.Abs.ETrue _ -> failure x
  Grammar.Abs.EFalse _ -> failure x
  Grammar.Abs.ECall _ ident exprs -> failure x
  Grammar.Abs.EString _ string -> failure x
  Grammar.Abs.ENeg _ expr -> failure x
  Grammar.Abs.ENot _ expr -> failure x
  Grammar.Abs.EMul _ expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd _ expr1 addop expr2 -> failure x
  Grammar.Abs.ERel _ expr1 relop expr2 -> failure x
  Grammar.Abs.EAnd _ expr1 expr2 -> failure x
  Grammar.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Grammar.Abs.AddOp' a -> Result
transAddOp x = case x of
  Grammar.Abs.Plus _ -> failure x
  Grammar.Abs.Minus _ -> failure x

transMulOp :: Show a => Grammar.Abs.MulOp' a -> Result
transMulOp x = case x of
  Grammar.Abs.Times _ -> failure x
  Grammar.Abs.Div _ -> failure x
  Grammar.Abs.Mod _ -> failure x

transRelOp :: Show a => Grammar.Abs.RelOp' a -> Result
transRelOp x = case x of
  Grammar.Abs.LTH _ -> failure x
  Grammar.Abs.LE _ -> failure x
  Grammar.Abs.GTH _ -> failure x
  Grammar.Abs.GE _ -> failure x
  Grammar.Abs.EQU _ -> failure x
  Grammar.Abs.NE _ -> failure x

transInst :: Show a => Grammar.Abs.Inst' a -> Result
transInst x = case x of
  Grammar.Abs.IAssign _ ident expr -> failure x
  Grammar.Abs.IIfElse _ expr block1 block2 -> failure x
  Grammar.Abs.IIf _ expr block -> failure x
  Grammar.Abs.IInit _ type_ ident expr -> failure x
  Grammar.Abs.IWhile _ expr block -> failure x
  Grammar.Abs.IFunDef _ ident args block -> failure x
  Grammar.Abs.IExpr _ expr -> failure x
  Grammar.Abs.IPrint _ expr -> failure x

transArg :: Show a => Grammar.Abs.Arg' a -> Result
transArg x = case x of
  Grammar.Abs.ArgVal _ type_ ident -> failure x
  Grammar.Abs.ArgRef _ type_ ident -> failure x

transType :: Show a => Grammar.Abs.Type' a -> Result
transType x = case x of
  Grammar.Abs.TypeInt _ -> failure x
  Grammar.Abs.TypeBool _ -> failure x
  Grammar.Abs.TypeStr _ -> failure x
  Grammar.Abs.TypeVoid _ -> failure x

transBlock :: Show a => Grammar.Abs.Block' a -> Result
transBlock x = case x of
  Grammar.Abs.Bl _ insts -> failure x

transProgram :: Show a => Grammar.Abs.Program' a -> Result
transProgram x = case x of
  Grammar.Abs.Prog _ insts -> failure x
