-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Grammar.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Expr a
    = EVar a Ident | EInt a Integer | EAdd a (Expr a) (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Expr where
    fmap f x = case x of
        EVar a ident -> EVar (f a) ident
        EInt a integer -> EInt (f a) integer
        EAdd a expr1 expr2 -> EAdd (f a) (fmap f expr1) (fmap f expr2)

data Inst a
    = IAssign a Ident (Expr a)
    | IIf a (Expr a) (Inst a) (Inst a)
    | IInit a (Type a) Ident (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Inst where
    fmap f x = case x of
        IAssign a ident expr -> IAssign (f a) ident (fmap f expr)
        IIf a expr inst1 inst2 -> IIf (f a) (fmap f expr) (fmap f inst1) (fmap f inst2)
        IInit a type_ ident expr -> IInit (f a) (fmap f type_) ident (fmap f expr)

data Type a = TypeInt a
  deriving (Eq, Ord, Show, Read)

instance Functor Type where
    fmap f x = case x of
        TypeInt a -> TypeInt (f a)

data Program a = Prog a [Inst a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        Prog a insts -> Prog (f a) (map (fmap f) insts)

