-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language grammar.

module Grammar.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | EInt a Integer
    | ETrue a
    | EFalse a
    | ECall a Ident [Expr' a]
    | EString a String
    | ENeg a (Expr' a)
    | ENot a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Inst = Inst' BNFC'Position
data Inst' a
    = IAssign a Ident (Expr' a)
    | IIfElse a (Expr' a) (Block' a) (Block' a)
    | IIf a (Expr' a) (Block' a)
    | IInit a (Type' a) Ident (Expr' a)
    | IWhile a (Expr' a) (Block' a)
    | IFunDef a Ident [Arg' a] (Block' a)
    | IExpr a (Expr' a)
    | IPrint a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = ArgVal a (Type' a) Ident | ArgRef a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a = TypeInt a | TypeBool a | TypeStr a | TypeVoid a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Bl a [Inst' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Program = Program' BNFC'Position
data Program' a = Prog a [Inst' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    EInt p _ -> p
    ETrue p -> p
    EFalse p -> p
    ECall p _ _ -> p
    EString p _ -> p
    ENeg p _ -> p
    ENot p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

instance HasPosition Inst where
  hasPosition = \case
    IAssign p _ _ -> p
    IIfElse p _ _ _ -> p
    IIf p _ _ -> p
    IInit p _ _ _ -> p
    IWhile p _ _ -> p
    IFunDef p _ _ _ -> p
    IExpr p _ -> p
    IPrint p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    ArgVal p _ _ -> p
    ArgRef p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TypeInt p -> p
    TypeBool p -> p
    TypeStr p -> p
    TypeVoid p -> p

instance HasPosition Block where
  hasPosition = \case
    Bl p _ -> p

instance HasPosition Program where
  hasPosition = \case
    Prog p _ -> p

