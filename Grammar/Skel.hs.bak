module Grammar.Skel where

-- Haskell module generated by the BNF converter

import Grammar.Abs
import Grammar.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transExpr :: Show a => Expr a -> Result
transExpr x = case x of
  EVar _ ident -> failure x
  EInt _ integer -> failure x
  EAdd _ expr1 expr2 -> failure x
transInst :: Show a => Inst a -> Result
transInst x = case x of
  EAs _ ident expr -> failure x
  EIf _ expr inst1 inst2 -> failure x
  EInit _ type_ ident expr -> failure x
transType :: Show a => Type a -> Result
transType x = case x of
  TypeInt _ -> failure x
transProgram :: Show a => Program a -> Result
transProgram x = case x of
  Prog _ insts -> failure x

