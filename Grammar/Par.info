-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Grammar/Par.y
-----------------------------------------------------------------------------

state 23 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_ident                                   (1)
	Integer -> L_integ                                 (2)
	Expr -> Ident                                      (3)
	Expr -> Integer                                    (4)
	Expr -> Expr '+' Expr                              (5)
	Inst -> Ident '=' Expr                             (6)
	Inst -> 'if' Expr 'then' Inst 'else' Inst          (7)
	Inst -> Type Ident '=' Expr                        (8)
	Type -> 'int'                                      (9)
	ListInst ->                                        (10)
	ListInst -> Inst                                   (11)
	ListInst -> Inst ';' ListInst                      (12)
	Program -> ListInst                                (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { PT _ (TS _ 1) }
	';'            { PT _ (TS _ 2) }
	'='            { PT _ (TS _ 3) }
	'else'         { PT _ (TS _ 4) }
	'if'           { PT _ (TS _ 5) }
	'int'          { PT _ (TS _ 6) }
	'then'         { PT _ (TS _ 7) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	Expr            rules 3, 4, 5
	Inst            rules 6, 7, 8
	Type            rule  9
	ListInst        rules 10, 11, 12
	Program         rule  13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'if'           shift, and enter state 8
	'int'          shift, and enter state 9
	L_ident        shift, and enter state 2
	%eof           reduce using rule 10

	Ident          goto state 3
	Inst           goto state 4
	Type           goto state 5
	ListInst       goto state 6
	Program        goto state 7

State 1


	L_ident        shift, and enter state 2


State 2

	Ident -> L_ident .                                  (rule 1)

	'+'            reduce using rule 1
	';'            reduce using rule 1
	'='            reduce using rule 1
	'else'         reduce using rule 1
	'then'         reduce using rule 1
	%eof           reduce using rule 1


State 3

	Inst -> Ident . '=' Expr                            (rule 6)

	'='            shift, and enter state 16


State 4

	ListInst -> Inst .                                  (rule 11)
	ListInst -> Inst . ';' ListInst                     (rule 12)

	';'            shift, and enter state 15
	%eof           reduce using rule 11


State 5

	Inst -> Type . Ident '=' Expr                       (rule 8)

	L_ident        shift, and enter state 2

	Ident          goto state 14

State 6

	Program -> ListInst .                               (rule 13)

	%eof           reduce using rule 13


State 7

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 8

	Inst -> 'if' . Expr 'then' Inst 'else' Inst         (rule 7)

	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 13

	Ident          goto state 10
	Integer        goto state 11
	Expr           goto state 12

State 9

	Type -> 'int' .                                     (rule 9)

	L_ident        reduce using rule 9


State 10

	Expr -> Ident .                                     (rule 3)

	'+'            reduce using rule 3
	';'            reduce using rule 3
	'else'         reduce using rule 3
	'then'         reduce using rule 3
	%eof           reduce using rule 3


State 11

	Expr -> Integer .                                   (rule 4)

	'+'            reduce using rule 4
	';'            reduce using rule 4
	'else'         reduce using rule 4
	'then'         reduce using rule 4
	%eof           reduce using rule 4


State 12

	Expr -> Expr . '+' Expr                             (rule 5)
	Inst -> 'if' Expr . 'then' Inst 'else' Inst         (rule 7)

	'+'            shift, and enter state 20
	'then'         shift, and enter state 21


State 13

	Integer -> L_integ .                                (rule 2)

	'+'            reduce using rule 2
	';'            reduce using rule 2
	'else'         reduce using rule 2
	'then'         reduce using rule 2
	%eof           reduce using rule 2


State 14

	Inst -> Type Ident . '=' Expr                       (rule 8)

	'='            shift, and enter state 19


State 15

	ListInst -> Inst ';' . ListInst                     (rule 12)

	'if'           shift, and enter state 8
	'int'          shift, and enter state 9
	L_ident        shift, and enter state 2
	%eof           reduce using rule 10

	Ident          goto state 3
	Inst           goto state 4
	Type           goto state 5
	ListInst       goto state 18

State 16

	Inst -> Ident '=' . Expr                            (rule 6)

	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 13

	Ident          goto state 10
	Integer        goto state 11
	Expr           goto state 17

State 17

	Expr -> Expr . '+' Expr                             (rule 5)
	Inst -> Ident '=' Expr .                            (rule 6)

	'+'            shift, and enter state 20
	';'            reduce using rule 6
	'else'         reduce using rule 6
	%eof           reduce using rule 6


State 18

	ListInst -> Inst ';' ListInst .                     (rule 12)

	%eof           reduce using rule 12


State 19

	Inst -> Type Ident '=' . Expr                       (rule 8)

	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 13

	Ident          goto state 10
	Integer        goto state 11
	Expr           goto state 24

State 20

	Expr -> Expr '+' . Expr                             (rule 5)

	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 13

	Ident          goto state 10
	Integer        goto state 11
	Expr           goto state 23

State 21

	Inst -> 'if' Expr 'then' . Inst 'else' Inst         (rule 7)

	'if'           shift, and enter state 8
	'int'          shift, and enter state 9
	L_ident        shift, and enter state 2

	Ident          goto state 3
	Inst           goto state 22
	Type           goto state 5

State 22

	Inst -> 'if' Expr 'then' Inst . 'else' Inst         (rule 7)

	'else'         shift, and enter state 25


State 23

	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr '+' Expr .                             (rule 5)

	'+'            shift, and enter state 20
			(reduce using rule 5)

	';'            reduce using rule 5
	'else'         reduce using rule 5
	'then'         reduce using rule 5
	%eof           reduce using rule 5


State 24

	Expr -> Expr . '+' Expr                             (rule 5)
	Inst -> Type Ident '=' Expr .                       (rule 8)

	'+'            shift, and enter state 20
	';'            reduce using rule 8
	'else'         reduce using rule 8
	%eof           reduce using rule 8


State 25

	Inst -> 'if' Expr 'then' Inst 'else' . Inst         (rule 7)

	'if'           shift, and enter state 8
	'int'          shift, and enter state 9
	L_ident        shift, and enter state 2

	Ident          goto state 3
	Inst           goto state 26
	Type           goto state 5

State 26

	Inst -> 'if' Expr 'then' Inst 'else' Inst .         (rule 7)

	';'            reduce using rule 7
	'else'         reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 9
Number of non-terminals: 8
Number of states: 27
